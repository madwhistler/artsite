import { onRequest } from "firebase-functions/v2/https";
import { initializeApp } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";
import { getStorage } from "firebase-admin/storage";
import { google } from "googleapis";
import * as path from 'path';
import { fileURLToPath } from 'url';
import * as functions from 'firebase-functions';
import * as fs from 'fs';
import * as os from 'os';

initializeApp();

const db = getFirestore();
const storage = getStorage();

const COLLECTION_NAME = "artwork";
const SPREADSHEET_ID = "1M70uwu-jimO_ncWuPi7M0vtSeCaKeKr4RrB8OFbRsZU";
const SHEET_NAME = "Sheet2";
const API_KEYS = new Set([process.env.SYNC_API_KEY, 'local-dev-key']);

function validateApiKey(authHeader) {
    if (!authHeader?.startsWith('Bearer ')) return false;
    const apiKey = authHeader.split('Bearer ')[1];
    return API_KEYS.has(apiKey);
}

async function getAuthClient() {
    const isEmulator = process.env.FUNCTIONS_EMULATOR === 'true';

    if (isEmulator) {
        try {
            // In local environment, use service account credentials
            const __dirname = path.dirname(fileURLToPath(import.meta.url));
            const keyPath = path.join(__dirname, 'config', 'credentials.json');

            return new google.auth.GoogleAuth({
                keyFile: keyPath,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
            }).getClient();
        } catch (error) {
            console.error('Error loading local credentials:', error);
            throw new Error('Failed to initialize local auth client');
        }
    } else {
        // In deployed environment, use default credentials
        return new google.auth.GoogleAuth({
            scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        }).getClient();
    }
}

async function fetchSheetData() {
    const sheets = google.sheets('v4');
    try {
        const authClient = await getAuthClient();

        const [valuesResponse, formattingResponse] = await Promise.all([
            sheets.spreadsheets.values.get({
                auth: authClient,
                spreadsheetId: SPREADSHEET_ID,
                range: `${SHEET_NAME}!A2:L` // Include column L for tags
            }),
            sheets.spreadsheets.get({
                auth: authClient,
                spreadsheetId: SPREADSHEET_ID,
                ranges: [`${SHEET_NAME}!A2:L`], // Include column L for tags
                fields: 'sheets.data.rowData.values.hyperlink,sheets.data.rowData.values.formattedValue'
            })
        ]);

        if (!valuesResponse.data.values) {
            console.log('No data found in spreadsheet');
            return [];
        }

        const values = valuesResponse.data.values;
        const formatting = formattingResponse.data.sheets[0].data[0].rowData || [];

        const enrichedRows = values.map((row, rowIndex) => {
            const formattingRow = formatting[rowIndex]?.values || [];
            return row.map((value, colIndex) => {
                const cellFormatting = formattingRow[colIndex] || {};
                return {
                    value: value || '',
                    hyperlink: cellFormatting.hyperlink || ''
                };
            });
        });

        return enrichedRows.filter(row => row.some(cell => cell.value?.trim()));
    } catch (error) {
        console.error('Error fetching sheet data:', error.message);
        if (error.response) {
            console.error('Error details:', JSON.stringify(error.response.data, null, 2));
        }
        throw new Error(`Failed to fetch sheet data: ${error.message}`);
    }
}

function formatDocument(rowData) {
    console.log('Formatting document from row data:', JSON.stringify(rowData));

    // Extract the first 10 fields as before
    const [
        originalId,
        itemName,
        price,
        status,
        notes,
        medium,
        height,
        width,
        date,
        imageData
    ] = rowData.slice(0, 10).map(cell => cell.value?.trim() || '');

    // Extract image URL from the 11th column (index 10)
    const imageUrl = rowData[10]?.hyperlink || rowData[10]?.value || '';
    
    // Extract tags from the 12th column (index 11) if it exists
    const tagsString = rowData[11]?.value || '';
    
    console.log('Image cell data:', {
        value: imageData,
        hyperlink: imageUrl,
        rawCell: rowData[9]
    });
    
    console.log('Tags data:', {
        value: tagsString
    });

    // Process tags if they exist - split by comma and trim each tag
    const tagArray = tagsString 
        ? tagsString.split(',').map(tag => tag.trim()).filter(tag => tag) 
        : [];

    const normalizedId = originalId.toLowerCase().replace(/\s+/g, '-');

    const document = {
        originalId,
        normalizedId,
        itemName: itemName || '',
        price: parseFloat(price) || 0,
        status: status?.toLowerCase() || '',
        notes: notes || '',
        medium: medium || '',
        dimensions: {
            height: parseInt(height) || 0,
            width: parseInt(width) || 0
        },
        date: date || '',
        imageUrl,
        imageTitle: imageData || '',
        tags: tagArray, // Add the processed tags array
        updatedAt: new Date().toISOString(),
        createdAt: new Date().toISOString()
    };

    console.log('Formatted document:', JSON.stringify(document));
    return document;
}

export const syncArtworkFromSheets = onRequest({
    timeoutSeconds: 540,
    memory: '2GiB'
}, async (req, res) => {
    try {
        if (req.method !== 'POST') {
            res.status(405).send('Method not allowed');
            return;
        }

        if (!validateApiKey(req.headers.authorization)) {
            res.status(401).json({
                error: 'Unauthorized',
                message: 'Invalid API key'
            });
            return;
        }

        const rows = await fetchSheetData();

        if (!rows.length) {
            res.status(200).json({
                message: 'No data to sync',
                total: 0,
                processed: 0,
                errors: []
            });
            return;
        }

        const batch = db.batch();
        const results = {
            total: rows.length,
            processed: 0,
            errors: [],
            newIds: {}
        };

        for (const [index, row] of rows.entries()) {
            try {
                console.log(`\nProcessing row ${index + 1}/${rows.length}`);
                const originalId = row[0].value?.trim();
                if (!originalId) {
                    results.errors.push(`Skipped row ${index + 1}: Missing Item ID`);
                    continue;
                }

                const docData = formatDocument(row);
                console.log(`Processed document ${docData.originalId}:`, {
                    imageUrl: docData.imageUrl,
                    imageTitle: docData.imageTitle,
                    tags: docData.tags // Log the tags for debugging
                });

                const docRef = db.collection(COLLECTION_NAME).doc();
                results.newIds[docData.originalId] = docRef.id;

                batch.set(docRef, docData);
                results.processed++;

            } catch (error) {
                console.error(`Error processing row ${index + 1}:`, error);
                results.errors.push(`Error processing row ${index + 1}: ${error.message}`);
            }
        }

        await batch.commit();

        res.status(200).json({
            message: 'Sync completed',
            ...results
        });

    } catch (error) {
        console.error('Sync failed:', error);
        res.status(500).json({
            error: 'Sync failed',
            message: error.message,
            stack: process.env.FUNCTIONS_EMULATOR === 'true' ? error.stack : undefined
        });
    }
});
